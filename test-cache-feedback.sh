#!/bin/bash

# Script de Prueba del Sistema de Feedback Autom√°tico de Cache
# Este script demuestra c√≥mo funciona la detecci√≥n autom√°tica de problemas

set -e

# Configuraci√≥n
SERVER_URL="http://localhost:8090"
API_BASE="$SERVER_URL/api/v1"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Funci√≥n para hacer requests con manejo de errores
make_request() {
    local method=$1
    local endpoint=$2
    local data=$3
    local description=$4
    
    log "$description"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -w "\n%{http_code}" "$API_BASE$endpoint")
    else
        response=$(curl -s -w "\n%{http_code}" -X "$method" \
            -H "Content-Type: application/json" \
            -d "$data" \
            "$API_BASE$endpoint")
    fi
    
    # Separar body y status code
    body=$(echo "$response" | head -n -1)
    status_code=$(echo "$response" | tail -n 1)
    
    if [ "$status_code" -eq 200 ] || [ "$status_code" -eq 201 ]; then
        success "Request exitoso (HTTP $status_code)"
        echo "$body" | jq '.' 2>/dev/null || echo "$body"
    else
        error "Request fall√≥ (HTTP $status_code)"
        echo "$body"
        return 1
    fi
    
    echo ""
}

# Verificar que el servidor est√© corriendo
check_server() {
    log "Verificando que el servidor est√© corriendo..."
    if curl -s "$SERVER_URL/health" > /dev/null 2>&1; then
        success "Servidor est√° corriendo en $SERVER_URL"
    else
        error "Servidor no est√° corriendo en $SERVER_URL"
        echo "Por favor inicia el servidor con: go run cmd/server/main.go"
        exit 1
    fi
    echo ""
}

# Limpiar cache antes de empezar
clear_cache() {
    log "Limpiando cache para empezar con estado limpio..."
    # Nota: Esto requerir√≠a un endpoint adicional o acceso directo a Redis
    warning "Limpieza manual de cache no implementada en este script"
    echo ""
}

# Paso 1: Generar respuesta inicial (que ser√° cacheada)
generate_initial_response() {
    log "=== PASO 1: Generando respuesta inicial (ser√° cacheada) ==="
    
    make_request "POST" "/generate" '{
        "prompt": "Escribe una funci√≥n en JavaScript para ordenar un array de n√∫meros",
        "model": "gpt-4o",
        "provider": "azure",
        "maxTokens": 500,
        "temperature": 0.7
    }' "Generando funci√≥n de ordenamiento JavaScript"
}

# Paso 2: Hacer la misma pregunta (deber√≠a venir del cache)
test_cache_hit() {
    log "=== PASO 2: Repitiendo la misma pregunta (deber√≠a venir del cache) ==="
    
    make_request "POST" "/generate" '{
        "prompt": "Escribe una funci√≥n en JavaScript para ordenar un array de n√∫meros",
        "model": "gpt-4o", 
        "provider": "azure",
        "maxTokens": 500,
        "temperature": 0.7
    }' "Repitiendo pregunta (esperando cache hit)"
}

# Paso 3: Reportar problema con la respuesta (detecci√≥n autom√°tica)
report_problem_automatic() {
    log "=== PASO 3: Reportando problema autom√°ticamente ==="
    
    make_request "POST" "/generate" '{
        "prompt": "Este c√≥digo no funciona, hay un error de sintaxis. Puedes corregirlo?",
        "model": "gpt-4o",
        "provider": "azure", 
        "maxTokens": 500,
        "temperature": 0.7
    }' "Reportando problema (detecci√≥n autom√°tica de keywords)"
}

# Paso 4: Verificar estad√≠sticas de cache
check_cache_stats() {
    log "=== PASO 4: Verificando estad√≠sticas de cache ==="
    
    make_request "GET" "/cache/stats?limit=5" "" "Obteniendo estad√≠sticas de cache"
}

# Paso 5: Hacer la pregunta original otra vez (deber√≠a generar nueva respuesta)
test_cache_invalidation() {
    log "=== PASO 5: Repitiendo pregunta original (cache deber√≠a estar invalidado) ==="
    
    make_request "POST" "/generate" '{
        "prompt": "Escribe una funci√≥n en JavaScript para ordenar un array de n√∫meros",
        "model": "gpt-4o",
        "provider": "azure",
        "maxTokens": 500,
        "temperature": 0.7
    }' "Pregunta original despu√©s de invalidaci√≥n"
}

# Paso 6: Probar diferentes tipos de problemas
test_different_problem_types() {
    log "=== PASO 6: Probando diferentes tipos de detecci√≥n de problemas ==="
    
    # Problema de compilaci√≥n
    make_request "POST" "/generate" '{
        "prompt": "El c√≥digo anterior no compila, hay syntax error",
        "model": "gpt-4o",
        "provider": "azure",
        "maxTokens": 300
    }' "Problema de compilaci√≥n (severidad cr√≠tica)"
    
    sleep 2
    
    # Problema funcional
    make_request "POST" "/generate" '{
        "prompt": "Esta funci√≥n est√° mal, no ordena correctamente",
        "model": "gpt-4o", 
        "provider": "azure",
        "maxTokens": 300
    }' "Problema funcional (severidad alta)"
    
    sleep 2
    
    # Solicitud de correcci√≥n
    make_request "POST" "/generate" '{
        "prompt": "Corrige este c√≥digo por favor",
        "model": "gpt-4o",
        "provider": "azure", 
        "maxTokens": 300
    }' "Solicitud de correcci√≥n (severidad media)"
}

# Paso 7: Invalidaci√≥n manual de cache
test_manual_invalidation() {
    log "=== PASO 7: Probando invalidaci√≥n manual de cache ==="
    
    # Primero generar una respuesta para tener algo que invalidar
    make_request "POST" "/generate" '{
        "prompt": "Escribe funci√≥n suma en Python",
        "model": "gpt-4o",
        "provider": "azure",
        "maxTokens": 200
    }' "Generando funci√≥n Python para invalidar"
    
    sleep 2
    
    # Invalidar manualmente (necesitar√≠amos la cache_key real)
    warning "Invalidaci√≥n manual requiere cache_key espec√≠fica"
    log "Ejemplo de invalidaci√≥n manual:"
    echo 'curl -X POST http://localhost:8090/api/v1/cache/invalidate \'
    echo '  -H "Content-Type: application/json" \'
    echo '  -d '"'"'{"cache_key": "ai:gpt-4o:hash123:200:0.70", "reason": "Manual test"}'"'"
    echo ""
}

# Paso 8: Verificar estad√≠sticas finales
final_stats() {
    log "=== PASO 8: Estad√≠sticas finales ==="
    
    make_request "GET" "/cache/stats?limit=10" "" "Estad√≠sticas finales de cache"
}

# Funci√≥n principal
main() {
    echo -e "${BLUE}üöÄ Iniciando prueba del Sistema de Feedback Autom√°tico de Cache${NC}"
    echo -e "${BLUE}================================================================${NC}"
    echo ""
    
    # Verificar servidor
    check_server
    
    # Ejecutar pasos de prueba
    generate_initial_response
    sleep 3
    
    test_cache_hit
    sleep 3
    
    report_problem_automatic
    sleep 3
    
    check_cache_stats
    sleep 3
    
    test_cache_invalidation
    sleep 3
    
    test_different_problem_types
    sleep 3
    
    test_manual_invalidation
    sleep 3
    
    final_stats
    
    echo -e "${GREEN}üéâ Prueba completada exitosamente!${NC}"
    echo ""
    echo -e "${YELLOW}üìä Resumen de lo que se prob√≥:${NC}"
    echo "1. ‚úÖ Generaci√≥n inicial y caching"
    echo "2. ‚úÖ Cache hit en segunda consulta"
    echo "3. ‚úÖ Detecci√≥n autom√°tica de problemas"
    echo "4. ‚úÖ Invalidaci√≥n autom√°tica de cache"
    echo "5. ‚úÖ Regeneraci√≥n despu√©s de invalidaci√≥n"
    echo "6. ‚úÖ Diferentes tipos de detecci√≥n"
    echo "7. ‚úÖ Estad√≠sticas y monitoreo"
    echo ""
    echo -e "${BLUE}üí° El sistema ahora mejora autom√°ticamente la calidad del cache!${NC}"
}

# Funci√≥n de ayuda
show_help() {
    echo "Script de Prueba del Sistema de Feedback Autom√°tico de Cache"
    echo ""
    echo "Uso: $0 [opci√≥n]"
    echo ""
    echo "Opciones:"
    echo "  help          Mostrar esta ayuda"
    echo "  check         Solo verificar que el servidor est√© corriendo"
    echo "  stats         Solo mostrar estad√≠sticas de cache"
    echo "  clean         Limpiar y reiniciar prueba"
    echo ""
    echo "Sin opciones: Ejecutar prueba completa"
}

# Manejo de argumentos
case "${1:-}" in
    "help"|"-h"|"--help")
        show_help
        exit 0
        ;;
    "check")
        check_server
        exit 0
        ;;
    "stats")
        check_cache_stats
        exit 0
        ;;
    "clean")
        clear_cache
        main
        exit 0
        ;;
    "")
        main
        exit 0
        ;;
    *)
        error "Opci√≥n desconocida: $1"
        show_help
        exit 1
        ;;
esac