# ===========================================
# ConfigMap para MCP Server AI
# Contiene configuración no sensible
# ===========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-server-config
  namespace: mcp-server
  labels:
    app: mcp-server-ai
    component: configuration
    version: v1
  annotations:
    description: "Configuración general del servidor MCP"
data:
  # ===========================================
  # Configuración del Servidor
  # ===========================================
  SERVER_ENV: "production"
  IN_MODE: "release"
  LOG_LEVEL: "info"
  
  # Puertos del servidor
  HTTP_PORT: "8090"
  WS_PORT: "8091"
  GRPC_PORT: "50051"
  
  # ===========================================
  # Configuración de CORS
  # ===========================================
  CORS_ALLOW_ALL_ORIGINS: "false"
  CORS_ALLOWED_ORIGINS: "https://app.empresa.com,https://admin.empresa.com"
  CORS_ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
  CORS_ALLOW_HEADERS: "Origin,Content-Type,Accept,Authorization,X-Request-ID,X-User-ID,X-Session-ID"
  CORS_EXPOSE_HEADERS: "Content-Length,Content-Type,X-Request-ID"
  CORS_ALLOW_CREDENTIALS: "true"
  CORS_MAX_AGE: "43200"  # 12 horas
  
  # ===========================================
  # Configuración de Proveedores IA
  # ===========================================
  AWS_REGION: "us-west-2"
  AWS_DEFAULT_MODEL: "claude-3-sonnet"
  AZURE_DEFAULT_MODEL: "gpt-4o"
  DEFAULT_PROVIDER: "azure"
  
  # Límites de generación
  MAX_TOKENS: "4096"
  TEMPERATURE: "0.7"
  
  # ===========================================
  # Configuración de Cache
  # ===========================================
  CACHE_ENABLED: "true"
  CACHE_TTL: "3600"  # 1 hora
  USE_REDIS: "true"
  REDIS_HOST: "redis-service.mcp-server.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  
  # ===========================================
  # Configuración de Base de Datos
  # ===========================================
  POSTGRES_HOST: "postgres-service.mcp-server.svc.cluster.local"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "mcp_server"
  USE_DATABASE_PERSISTENCE: "true"
  
  # ===========================================
  # Configuración del Sistema de Sesiones
  # ===========================================
  ENABLE_SESSION_MANAGEMENT: "true"
  USE_REDIS_CACHE: "true"
  SESSION_MAX_MESSAGES: "100"
  SESSION_CACHE_TTL: "86400"  # 24 horas
  SESSION_CONTEXT_WINDOW: "50"
  
  # ===========================================
  # Configuración del Worker Pool
  # ===========================================
  ENABLE_PARALLEL_MODE: "true"
  POOL_MIN_WORKERS: "32"
  POOL_MAX_WORKERS: "512"
  POOL_QUEUE_SIZE: "100000"
  POOL_SCALE_INTERVAL: "5s"
  POOL_UTILIZATION_TARGET: "0.75"
  POOL_MAX_CONCURRENT: "10000"
  POOL_BUFFER_SIZE: "65536"
  
  # ===========================================
  # Configuración de Monitoreo
  # ===========================================
  ENABLE_METRICS: "true"
  METRICS_PORT: "9090"
  ENABLE_TRACING: "true"
  TRACING_ENDPOINT: "jaeger-collector.monitoring.svc.cluster.local:14268"
  
  # ===========================================
  # Configuración de Rate Limiting
  # ===========================================
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_RPS: "1000"
  RATE_LIMIT_BURST: "2000"
  
  # ===========================================
  # Configuración de Seguridad
  # ===========================================
  ENABLE_TLS: "true"
  TLS_MIN_VERSION: "1.2"
  TRUSTED_PROXIES: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"

---
# ===========================================
# ConfigMap para scripts de inicialización
# ===========================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-server-scripts
  namespace: mcp-server
  labels:
    app: mcp-server-ai
    component: scripts
data:
  # Script de health check
  health-check.sh: |
    #!/bin/sh
    # Script de verificación de salud para el contenedor
    
    # Verificar servicio HTTP
    if ! wget --no-verbose --tries=1 --spider http://localhost:8090/health; then
      echo "ERROR: Servicio HTTP no responde"
      exit 1
    fi
    
    # Verificar servicio gRPC
    if ! nc -z localhost 50051; then
      echo "ERROR: Servicio gRPC no responde"
      exit 1
    fi
    
    echo "OK: Todos los servicios están funcionando"
    exit 0
  
  # Script de inicialización
  init.sh: |
    #!/bin/sh
    # Script de inicialización del contenedor
    
    echo "Iniciando MCP Server AI..."
    
    # Verificar conexión a Redis
    echo "Verificando conexión a Redis..."
    until nc -z ${REDIS_HOST} ${REDIS_PORT}; do
      echo "Esperando a Redis..."
      sleep 2
    done
    echo "Redis está disponible"
    
    # Verificar conexión a PostgreSQL
    echo "Verificando conexión a PostgreSQL..."
    until nc -z ${POSTGRES_HOST} ${POSTGRES_PORT}; do
      echo "Esperando a PostgreSQL..."
      sleep 2
    done
    echo "PostgreSQL está disponible"
    
    # Ejecutar migraciones si es necesario
    if [ -d "/app/migrations" ]; then
      echo "Ejecutando migraciones de base de datos..."
      # Aquí iría el comando de migración
    fi
    
    echo "Inicialización completada"