# ===========================================
# Docker Compose para MCP Server AI
# Versión: 3.9 (última versión estable)
# ===========================================
version: "3.9"

# Definición de redes personalizadas para aislamiento
networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

# Volúmenes para persistencia de datos
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  logs-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # ===========================================
  # Servicio Principal: MCP Server AI
  # ===========================================
  mcp-server:
    # Nombre del contenedor
    container_name: mcp-server-ai

    # Construcción de la imagen
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_ENV=production

    # Imagen a usar (si no se construye localmente)
    image: mcp-server-ai:latest

    # Política de reinicio
    restart: unless-stopped

    # Variables de entorno (se cargan desde .env)
    env_file:
      - .env

    # Variables de entorno adicionales
    environment:
      # Configuración de Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0

      # Configuración de PostgreSQL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mcp_server
      - POSTGRES_USER=${POSTGRES_USER:-mcp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}

      # Configuración del servidor
      - SERVER_ENV=production
      - LOG_LEVEL=info
      - ENABLE_METRICS=true

    # Mapeo de puertos
    ports:
      - "8090:8090" # API HTTP/REST
      - "8091:8091" # WebSocket
      - "50051:50051" # gRPC

    # Volúmenes montados
    volumes:
      # Logs persistentes
      - logs-data:/app/logs
      # Archivo de configuración local
      - ./.env:/app/.env:ro
      # Migraciones de base de datos
      - ./migrations:/app/migrations:ro

    # Dependencias de otros servicios
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.10

    # Health check personalizado
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8090/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Límites de recursos
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

    # Configuración de logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=mcp-server"

  # ===========================================
  # Servicio de Cache: Redis
  # ===========================================
  redis:
    # Imagen oficial de Redis
    image: redis:7-alpine

    # Nombre del contenedor
    container_name: mcp-redis

    # Política de reinicio
    restart: unless-stopped

    # Comando con configuración personalizada
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfilename "redis-aof.aof"
      --dbfilename "redis-dump.rdb"
      --save 900 1
      --save 300 10
      --save 60 10000

    # Puertos (solo accesible dentro de la red)
    expose:
      - "6379"

    # Volúmenes para persistencia
    volumes:
      - redis-data:/data

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.20

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Límites de recursos
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # ===========================================
  # Base de Datos: PostgreSQL
  # ===========================================
  postgres:
    # Imagen oficial de PostgreSQL
    image: postgres:16-alpine

    # Nombre del contenedor
    container_name: mcp-postgres

    # Política de reinicio
    restart: unless-stopped

    # Variables de entorno para configuración
    environment:
      - POSTGRES_DB=mcp_server
      - POSTGRES_USER=${POSTGRES_USER:-mcp_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=es_ES.UTF-8
      - PGDATA=/var/lib/postgresql/data/pgdata

    # Puertos (solo accesible dentro de la red)
    expose:
      - "5432"

    # Volúmenes para persistencia y scripts de inicialización
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.30

    # Health check
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mcp_user} -d mcp_server"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Límites de recursos
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M

  # ===========================================
  # Proxy Inverso: Nginx (Opcional)
  # ===========================================
  nginx:
    # Imagen oficial de Nginx
    image: nginx:alpine

    # Nombre del contenedor
    container_name: mcp-nginx

    # Política de reinicio
    restart: unless-stopped

    # Puertos expuestos al host
    ports:
      - "80:80" # HTTP
      - "443:443" # HTTPS

    # Volúmenes para configuración y certificados SSL
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/sites:/etc/nginx/sites-enabled:ro
      - ./deploy/nginx/ssl:/etc/nginx/ssl:ro
      - logs-data:/var/log/nginx

    # Dependencias
    depends_on:
      - mcp-server

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.40

    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # Monitoreo: Prometheus (Opcional)
  # ===========================================
  prometheus:
    # Imagen oficial de Prometheus
    image: prom/prometheus:latest

    # Nombre del contenedor
    container_name: mcp-prometheus

    # Política de reinicio
    restart: unless-stopped

    # Comando con archivo de configuración
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"

    # Puertos
    ports:
      - "9090:9090"

    # Volúmenes para configuración y datos
    volumes:
      - ./deploy/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.50

    # Dependencias
    depends_on:
      - mcp-server

  # ===========================================
  # Visualización: Grafana (Opcional)
  # ===========================================
  grafana:
    # Imagen oficial de Grafana
    image: grafana/grafana:latest

    # Nombre del contenedor
    container_name: mcp-grafana

    # Política de reinicio
    restart: unless-stopped

    # Variables de entorno
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource

    # Puertos
    ports:
      - "3000:3000"

    # Volúmenes para persistencia
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro

    # Configuración de red
    networks:
      mcp-network:
        ipv4_address: 172.28.0.60

    # Dependencias
    depends_on:
      - prometheus
